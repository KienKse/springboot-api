package com.cartas.card;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

// @RestController = @Controller + @ResponseBody

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /api (after Application path)
public class CartaController {

    @Autowired // This means to get the bean called cartaRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CartaRepository cartaRepository;
    private Long cartaId;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewCarta (@RequestParam String name
            , @RequestParam String efeito_carta
            , @RequestParam Integer qtd_merits_carta
            , @RequestParam String tipo_carta
            , @RequestParam String range_carta
            , @RequestParam Integer duracao_efeito_carta) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Carta c = new Carta();
        c.setNome_carta(name);
        c.setEfeito_carta(efeito_carta);
        c.setQtd_merits_carta(qtd_merits_carta);
        c.setTipo_carta(tipo_carta);
        c.setRange_carta(range_carta);
        c.setDuracao_efeito_carta(duracao_efeito_carta);
        cartaRepository.save(c);
        return "Saved";
    }

    // Create a new card - METHOD PostMapping
//    @PostMapping("/add2")
//    public Carta cartaNova (@Valid @RequestBody String name
//            , @RequestParam String efeito_carta
//            , @RequestParam Integer qtd_merits_carta
//            , @RequestParam String tipo_carta
//            , @RequestParam String range_carta
//            , @RequestParam Integer duracao_efeito_carta) {
//
//        Carta c2 = new Carta();
//        c2.setNome_carta(name);
//        c2.setEfeito_carta(efeito_carta);
//        c2.setQtd_merits_carta(qtd_merits_carta);
//        c2.setTipo_carta(tipo_carta);
//        c2.setRange_carta(range_carta);
//        c2.setDuracao_efeito_carta(duracao_efeito_carta);
//        cartaRepository.save(c2);
//
//        return cartaNova.save(note);
//    }

    /*
       @Valid - @NotBlank If the request body doesnâ€™t have a title or a content,
        then spring will return a 400 BadRequest error to the client.
     */

    // Get - Carta
    @GetMapping("/carta/{id}")
    public Carta getCartaById(@PathVariable(value = "id") Long cartaId) {
        this.cartaId = cartaId;
        return cartaRepository.findById(cartaId)
                .orElseThrow(() -> new ResourceNotFoundException("CARTA", "id", cartaId));
    }

    // Update Carta
    @PutMapping("/carta/{id}")
    public Carta updateNote(@PathVariable(value = "id") Long cartaId,
                           @Valid @RequestBody Carta cartaDetails) {

        Carta carta = cartaRepository.findById(cartaId)
                .orElseThrow(() -> new ResourceNotFoundException("Note", "id", cartaId));

        carta.setNome_carta(cartaDetails.getNome_carta());
        carta.setEfeito_carta(cartaDetails.getEfeito_carta());
        carta.setQtd_merits_carta(cartaDetails.getQtd_merits_carta());
        carta.setTipo_carta(cartaDetails.getTipo_carta());
        carta.setRange_carta(cartaDetails.getRange_carta());
        carta.setDuracao_efeito_carta(cartaDetails.getDuracao_efeito_carta());


        Carta updatedCarta = cartaRepository.save(carta);
        return updatedCarta;
    }

    // Get /ALL Carta
    @GetMapping(path="/all")
    public @ResponseBody Iterable<Carta> getAllCartas() {
        // This returns a JSON or XML with the users
        return cartaRepository.findAll();
    }

    // Delete Carta
    @DeleteMapping("/carta/{id}")
    public ResponseEntity<?> deleteNote(@PathVariable(value = "id") Long cartaId) {
        Carta carta = cartaRepository.findById(cartaId)
                .orElseThrow(() -> new ResourceNotFoundException("Carta", "id", cartaId));

        cartaRepository.delete(carta);

        return ResponseEntity.ok().build();
    }
}
